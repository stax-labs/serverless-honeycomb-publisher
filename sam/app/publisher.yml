AWSTemplateFormatVersion: "2010-09-09"
Description: This template builds the necessary lambda infra for the Honeycomb Publisher.
Transform: 'AWS::Serverless-2016-10-31'

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: 'Honeycomb Monitoring Parameters'
        Parameters:
        - HoneycombWriteKey
        - KMSKeyId
        - HoneycombAPIHost
        - HoneycombDataset
      - Label:
          default: 'Log Groups to Monitor'
        Parameters:
        - LogGroupName
        - LogGroupName1
        - LogGroupName2
        - LogGroupName3
        - LogGroupName4
        - LogGroupName5
        - FilterPattern
  'AWS::ServerlessRepo::Application':
    Name: serverless-agentless-honeycomb-publisher
    Description: >-
      This template builds the necessary lambda infra for the Honeycomb Publisher.
    Author: Stax
    SpdxLicenseId: Apache-2.0
    Labels: [honeycomb, sam, serverless, publisher, trace]
    HomePageUrl: https://github.com/stax-labs/serverless-honeycomb-publisher
    SemanticVersion: 1.2.1
    SourceCodeUrl: https://github.com/stax-labs/serverless-honeycomb-publisher
    LicenseUrl: ../../LICENSE
    ReadmeUrl: ../../README.md

Parameters:
  SourceType:
    Type: String
    Default: CloudWatchLogs
    AllowedValues:
      - CloudWatchLogs
      - Kinesis
  KinesisStreamArn:
    Type: String
    Default: ""
  HoneycombWriteKey:
    Type: String
    Description: Your Honeycomb write key. If KMSKeyId is set, this should be a Cyphertext Blob from KMS.
  KMSKeyId:
    Type: String
    Default: ''
    Description: 'KMS Key ID used to encrypt your Honeycomb write key (ex: a80d80aa-19b5-486a-a163-a4502b5555)'
  HoneycombAPIHost:
    Type: String
    Default: https://api.honeycomb.io
    Description: Optional. Altenative Honeycomb API host.
  HoneycombDataset:
    Type: String
    Default: lambda-events
    Description: Catch-all dataset used if upstream events did not include a dataset
  LogGroupName:
    Type: String
    Default: ''
    Description: The name of the AWS Cloudwatch Log Group to subscribe to
  LogGroupName1:
    Type: String
    Default: ''
    Description: Additional log group to subscribe to
  LogGroupName2:
    Type: String
    Default: ''
    Description: Additional log group to subscribe to
  LogGroupName3:
    Type: String
    Default: ''
    Description: Additional log group to subscribe to
  LogGroupName4:
    Type: String
    Default: ''
    Description: Additional log group to subscribe to
  LogGroupName5:
    Type: String
    Default: ''
    Description: Additional log group to subscribe to
  FilterPattern:
    Type: String
    Default: ''
    Description: The filtering expressions that restrict which cloudwatch log lines get sent
  KinesisStringMatch:
    Type: String
    Default: ''
    Description: The string to match against to determine what is a HC event and what isn't in a kinesis stream
Conditions:
  EncryptionEnabled: !Not [!Equals [!Ref KMSKeyId, '']]
  LogGroup1Enabled: !Not [!Equals [!Ref LogGroupName1, '']]
  LogGroup2Enabled: !Not [!Equals [!Ref LogGroupName2, '']]
  LogGroup3Enabled: !Not [!Equals [!Ref LogGroupName3, '']]
  LogGroup4Enabled: !Not [!Equals [!Ref LogGroupName4, '']]
  LogGroup5Enabled: !Not [!Equals [!Ref LogGroupName5, '']]
  IsCloudWatchLogs: !Equals [!Ref SourceType, "CloudWatchLogs"]
  IsKinesis: !Equals [!Ref SourceType, "Kinesis"]  

Resources:

  ######
  # Cloudwatch Resources
  ######

  CWLogsLambdaHandler:
    Type: "AWS::Serverless::Function"
    Condition: IsCloudWatchLogs
    Properties:
      CodeUri: '../../dist/handler.zip'
      Description: Lambda function for creating log groups from cloudformation
      Handler: cwlog-creator
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "arn:aws:logs:*:*:*"
      MemorySize: 128
      Runtime: go1.x
      Timeout: 10
  LogGroupCreate:
    Condition: IsCloudWatchLogs
    Type: "Custom::LogGroupCreate"
    Version: "1.0"
    Properties:
      ServiceToken: !Sub "${CWLogsLambdaHandler.Arn}"
      LogGroupName: !Ref LogGroupName
  LogGroupCreate1:
    Type: "Custom::LogGroupCreate"
    Condition: LogGroup1Enabled
    Version: "1.0"
    Properties:
      ServiceToken: !Sub "${CWLogsLambdaHandler.Arn}"
      LogGroupName: !Ref LogGroupName1
  LogGroupCreate2:
    Type: "Custom::LogGroupCreate"
    Condition: LogGroup2Enabled
    Version: "1.0"
    Properties:
      ServiceToken: !Sub "${CWLogsLambdaHandler.Arn}"
      LogGroupName: !Ref LogGroupName2
  LogGroupCreate3:
    Type: "Custom::LogGroupCreate"
    Condition: LogGroup3Enabled
    Version: "1.0"
    Properties:
      ServiceToken: !Sub "${CWLogsLambdaHandler.Arn}"
      LogGroupName: !Ref LogGroupName3
  LogGroupCreate4:
    Type: "Custom::LogGroupCreate"
    Condition: LogGroup4Enabled
    Version: "1.0"
    Properties:
      ServiceToken: !Sub "${CWLogsLambdaHandler.Arn}"
      LogGroupName: !Ref LogGroupName4
  LogGroupCreate5:
    Type: "Custom::LogGroupCreate"
    Condition: LogGroup5Enabled
    Version: "1.0"
    Properties:
      ServiceToken: !Sub "${CWLogsLambdaHandler.Arn}"
      LogGroupName: !Ref LogGroupName5
  CloudWatchPublisherLambdaHandler:
    Condition: IsCloudWatchLogs
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: '../../dist/handler.zip'
      Description: Lambda function for publishing asynchronous events from Lambda
      Environment:
        Variables:
          HONEYCOMB_WRITE_KEY: !Ref HoneycombWriteKey
          KMS_KEY_ID: !Ref KMSKeyId
          API_HOST: !Ref HoneycombAPIHost
          DATASET: !Ref HoneycombDataset
      Handler: cwpublisher
      MemorySize: 128
      Role:
        "Fn::GetAtt":
          - LambdaIAMRole
          - Arn
      Runtime: go1.x
      Timeout: 10
  ExecutePermission:
    Condition: IsCloudWatchLogs
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        "Fn::GetAtt":
          - CloudWatchPublisherLambdaHandler
          - Arn
      Principal: 'logs.amazonaws.com'
  CloudwatchSubscriptionFilter:
    Condition: IsCloudWatchLogs
    Type: "AWS::Logs::SubscriptionFilter"
    Properties:
      DestinationArn:
        "Fn::GetAtt":
          - CloudWatchPublisherLambdaHandler
          - Arn
      LogGroupName: !Ref LogGroupName
      FilterPattern: !Ref FilterPattern
    DependsOn: [ExecutePermission, LogGroupCreate]
  # hacky work-around to allow multiple optional inputs for log group name
  # clearly hitting some limitations of the Cloudformation workflow here
  CloudwatchSubscriptionFilter1:
    Type: "AWS::Logs::SubscriptionFilter"
    Condition: LogGroup1Enabled
    Properties:
      DestinationArn:
        "Fn::GetAtt":
          - CloudWatchPublisherLambdaHandler
          - Arn
      LogGroupName: !Ref LogGroupName1
      FilterPattern: !Ref FilterPattern
    DependsOn: [ExecutePermission, LogGroupCreate1]
  CloudwatchSubscriptionFilter2:
    Type: "AWS::Logs::SubscriptionFilter"
    Condition: LogGroup2Enabled
    Properties:
      DestinationArn:
        "Fn::GetAtt":
          - CloudWatchPublisherLambdaHandler
          - Arn
      LogGroupName: !Ref LogGroupName2
      FilterPattern: !Ref FilterPattern
    DependsOn: [ExecutePermission, LogGroupCreate2]
  CloudwatchSubscriptionFilter3:
    Type: "AWS::Logs::SubscriptionFilter"
    Condition: LogGroup3Enabled
    Properties:
      DestinationArn:
        "Fn::GetAtt":
          - CloudWatchPublisherLambdaHandler
          - Arn
      LogGroupName: !Ref LogGroupName3
      FilterPattern: !Ref FilterPattern
    DependsOn: [ExecutePermission, LogGroupCreate3]
  CloudwatchSubscriptionFilter4:
    Type: "AWS::Logs::SubscriptionFilter"
    Condition: LogGroup4Enabled
    Properties:
      DestinationArn:
        "Fn::GetAtt":
          - CloudWatchPublisherLambdaHandler
          - Arn
      LogGroupName: !Ref LogGroupName4
      FilterPattern: !Ref FilterPattern
    DependsOn: [ExecutePermission, LogGroupCreate4]
  CloudwatchSubscriptionFilter5:
    Type: "AWS::Logs::SubscriptionFilter"
    Condition: LogGroup5Enabled
    Properties:
      DestinationArn:
        "Fn::GetAtt":
          - CloudWatchPublisherLambdaHandler
          - Arn
      LogGroupName: !Ref LogGroupName5
      FilterPattern: !Ref FilterPattern
    DependsOn: [ExecutePermission, LogGroupCreate5]

  ######
  # Kinesis Resources
  ######

  HoneycombKinesisConsumer:
    Condition: IsKinesis
    Type: AWS::Kinesis::StreamConsumer
    Properties: 
      ConsumerName: HoneycombConsumer
      StreamARN: !Ref KinesisStreamArn
  
  KinesisLambdaHandler:
    Type: "AWS::Serverless::Function"
    Condition: IsKinesis
    DependsOn: LambdaKinesisPolicy
    Properties:
      CodeUri: '../../dist/handler.zip'
      Description: Lambda function for publishing asynchronous events from Lambda
      Environment:
        Variables:
          HONEYCOMB_WRITE_KEY: !Ref HoneycombWriteKey
          KMS_KEY_ID: !Ref KMSKeyId
          API_HOST: !Ref HoneycombAPIHost
          DATASET: !Ref HoneycombDataset
          HONEYCOMB_EVENT_MATCH_STRING: !Ref KinesisStringMatch
      Handler: kpublisher
      MemorySize: 128
      Role:
        "Fn::GetAtt":
          - LambdaIAMRole
          - Arn
      Runtime: go1.x
      Timeout: 10
      Events:
        CloudwatchKinesisStream:
          Type: Kinesis
          Properties:
            StartingPosition: "LATEST"
            Stream: !GetAtt HoneycombKinesisConsumer.ConsumerARN 


  ######
  # Shared Resources
  ######

  LambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  LambdaLogPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "lambda-create-log"
      Roles:
          - Ref: LambdaIAMRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 'arn:aws:logs:*:*:*'
  LambdaKinesisPolicy:
    Type: "AWS::IAM::Policy"
    Condition: IsKinesis
    Properties:
      PolicyName: "consume-kinesis-stream"
      Roles:
          - Ref: LambdaIAMRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "kinesis:DescribeStream"
              - "kinesis:DescribeStreamSummary"
              - "kinesis:GetRecords"
              - "kinesis:GetShardIterator"
              - "kinesis:ListShards"
              - "kinesis:ListStreams"
              - "kinesis:SubscribeToShard" 
            Resource: !Ref KinesisStreamArn
          - Effect: Allow
            Action:
              - "kinesis:SubscribeToShard" 
            Resource: !Ref HoneycombKinesisConsumer

  LambdaKMSPolicy:
    Type: "AWS::IAM::Policy"
    Condition: EncryptionEnabled
    Properties:
      PolicyName: "lambda-kms-decrypt"
      Roles:
          - Ref: LambdaIAMRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              "Fn::Join":
                - ''
                -
                  - arn:aws:kms:*:*:key/
                  - !Ref KMSKeyId
